sonataFlowOperator:
  isReleaseCandidate: false # Indicates RC builds should be used by the chart to install Sonataflow
  enabled: true # whether the operator should be deployed by the chart
  subscription:
    namespace: openshift-serverless-logic # namespace where the operator should be deployed
    channel: alpha # channel of an operator package to subscribe to
    installPlanApproval: Automatic # whether the update should be installed automatically
    name: logic-operator-rhel8 # name of the operator package
    sourceName: redhat-operators # name of the catalog source
    startingCSV: "" # The initial version of the operator

serverlessOperator:
  enabled: true # whether the operator should be deployed by the chart
  subscription:
    namespace: openshift-serverless # namespace where the operator should be deployed
    channel: stable # channel of an operator package to subscribe to
    installPlanApproval: Automatic # whether the update should be installed automatically
    name: serverless-operator # name of the operator package
    sourceName: redhat-operators # name of the catalog source

rhdhOperator:
  isReleaseCandidate: false # Indicates RC builds should be used by the chart to install RHDH
  enabled: true # whether the operator should be deployed by the chart
  secretRef:
    name: backstage-backend-auth-secret # name of the secret that contains the credentials for the plugin to establish a communication channel with the Kubernetes API, ArgoCD and GitHub servers.
    backstage:
      backendSecret: BACKEND_SECRET # Key in the secret with name defined in the 'name' field that contains the value of the Backstage backend secret. Defaults to 'BACKEND_SECRET'. It's required.
    github: #GitHub specific configuration fields that are injected to the backstage instance to allow the plugin to communicate with GitHub.
      token: GITHUB_TOKEN # Key in the secret with name defined in the 'name' field that contains the value of the authentication token as expected by GitHub. Required for importing resource to the catalog, launching software templates and more. Defaults to 'GITHUB_TOKEN', empty for not available.
      clientId: GITHUB_CLIENT_ID # Key in the secret with name defined in the 'name' field that contains the value of the client ID that you generated on GitHub, for GitHub authentication (requires GitHub App). Defaults to 'GITHUB_CLIENT_ID', empty for not available.
      clientSecret: GITHUB_CLIENT_SECRET # Key in the secret with name defined in the 'name' field that contains the value of the client secret tied to the generated client ID. Defaults to 'GITHUB_CLIENT_SECRET', empty for not available.
    k8s: # Kubernetes specific configuration fields that are injected to the backstage instance to allow the plugin to communicate with the Kubernetes API Server.
      clusterToken: K8S_CLUSTER_TOKEN # Key in the secret with name defined in the 'name' field that contains the value of the Kubernetes API bearer token used for authentication. Defaults to 'K8S_CLUSTER_TOKEN', empty for not available.
      clusterUrl: K8S_CLUSTER_URL # Key in the secret with name defined in the 'name' field that contains the value of the API URL of the kubernetes cluster. Defaults to 'K8S_CLUSTER_URL', empty for not available.
    argocd: # ArgoCD specific configuration fields that are injected to the backstage instance to allow the plugin to communicate with ArgoCD. Note that ArgoCD must be deployed beforehand and the argocd.enabled field must be set to true as well.
      url: ARGOCD_URL # Key in the secret with name defined in the 'name' field that contains the value of the URL of the ArgoCD API server. Defaults to 'ARGOCD_URL', empty for not available.
      username: ARGOCD_USERNAME # Key in the secret with name defined in the 'name' field that contains the value of the username to login to ArgoCD. Defaults to 'ARGOCD_USERNAME', empty for not available.
      password: ARGOCD_PASSWORD # Key in the secret with name  defined in the 'name' field that contains the value of the password to authenticate to ArgoCD. Defaults to 'ARGOCD_PASSWORD', empty for not available.
  subscription:
    namespace: rhdh-operator # namespace where the operator should be deployed
    channel: fast # channel of an operator package to subscribe to
    installPlanApproval: Automatic # whether the update should be installed automatically
    name: rhdh # name of the operator package
    sourceName: redhat-operators # name of the catalog source
    startingCSV: "" # The initial version of the operator

rhdhPlugins: # RHDH plugins required for the Orchestrator
  npmRegistry: ""
  scope: "@janus-idp"
  orchestrator:
    package: "backstage-plugin-orchestrator@1.13.6"
    integrity: sha512-tFJVIX7az6elntZi1UPr8a8v7ViDqV+0lv2Ltto55GCOQ2+7jb4ja2f4zVdabkSINeHSEN93u2wRqUNo3GkRVg==
  orchestrator_backend:
    package: "backstage-plugin-orchestrator-backend-dynamic@1.9.6"
    integrity: sha512-KJOcaH3i8kHcHmxhKGAYOQCejTjLliNOyhDDj0nMloPAZ81YWRPwfx+oE9wcibSxwX1x+pwFcdRww9VNA+ZeoQ==
  notifications:
    package: "plugin-notifications@1.3.7"
    integrity: sha512-86KSvSYhnXk8jB7dIrkbaNm1A8kCu68vTwEaY5i8o71QUaBvH30RGbOk1SfKmkNt4VI7IvF8dg3BhtVLxQQj3Q==
  notifications_backend:
    package: "plugin-notifications-backend-dynamic@1.4.18"
    integrity: sha512-a/70Rb5OaOXdXM8uM8FDcwNUP8AB1K/kbp26/gfSAAN8X4+tD+mshYxcySx0Ms8u1qEgwlY0A8DkEwSoKAq7nA==

postgres:
  serviceName: "sonataflow-psql-postgresql" # The name of the Postgres DB service to be used by platform services. Cannot be empty.
  serviceNamespace: "sonataflow-infra" # The namespace of the Postgres DB service to be used by platform services.
  authSecret:
    name: "sonataflow-psql-postgresql" # name of existing secret to use for PostgreSQL credentials.
    userKey: postgres-username # name of key in existing secret to use for PostgreSQL credentials.
    passwordKey: postgres-password # name of key in existing secret to use for PostgreSQL credentials.
  database: sonataflow # existing database instance used by data index and job service

orchestrator:
  namespace: "sonataflow-infra" # Namespace where sonataflow's workflows run. The value is captured when running the setup.sh script and stored as a label in the selected namespace. User can override the value by populating this field. Defaults to `sonataflow-infra`.
  sonataPlatform:
    resources:
      requests:
        memory: "64Mi"
        cpu: "250m"
      limits:
        memory: "1Gi"
        cpu: "500m"

tekton:
  enabled: false # whether to create the Tekton pipeline resources

argocd:
  enabled: false # whether to install the ArgoCD plugin and create the orchestrator AppProject
  namespace: "" # Defines the namespace where the orchestrator's instance of ArgoCD is deployed. The value is captured when running setup.sh script and stored as a label in the selected namespace. User can override the value by populating this field. Defaults to `orchestrator-gitops` in the setup.sh script.

